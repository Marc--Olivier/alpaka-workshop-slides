from snakemake.utils import Paramspace
import pandas as pd
import os

current_dir=os.getcwd()
input_params="params.csv"
configfile: "config.yaml"

# define a paramspace
# filename_params defines naming and directory structure of every instance of the parameter space
paramspace = Paramspace(pd.read_csv(config["input_params"], sep=","), filename_params="*", param_sep="-")

localrules: all, simulate, build_command

# target rule, defines entire anticipated output
rule all:
    input: expand("simulated/finished_{params}.txt", params=paramspace.instance_patterns)

# creates a string to set CMAKE flags in pic-build command
rule build_command:
    output: temp(f"commands/{paramspace.wildcard_pattern}.txt")
    params:
        sim_params=paramspace.instance
    run:
        import numpy as np
        dict = params.sim_params
        keys = list(dict)
        string = ""
        for i in range(len(dict)):
            if i == len(dict)-1 :
                string += "-D" + keys[i] + "=" + str(dict[keys[i]])
            else:
                string += "-D" + keys[i] + "=" + str(dict[keys[i]]) + ";"
        text_file = open(str(output), "w")
        text_file.write(string)
        text_file.close()

# compile for every paramter instance
rule compile:
    input:
        pic_project=config["pic_project"],
        pic_profile=config["pic_profile"],
        pic_build_command=rules.build_command.output
    # to use the paramspace naming pattern use python f-string formatting
    output: directory(f"simulations/sim_{paramspace.wildcard_pattern}")
    group: "compile"
    params:
        pic_cfg=config["pic_cfg"],
        # access one parameter set with the instance methode
        sim_params=paramspace.instance,
        # define name to use paramspace naming pattern in shell commands
        name=f"{paramspace.wildcard_pattern}"
    shell:
        """
        source {input.pic_profile}
        pic-create {input.pic_project} projects/run_{params.name}/
        cd projects/run_{params.name}/
        # append touch command to .tpl -> creates file when simulation is finished
        echo "if [[ ! -z \`grep \\\"100 % =\\\" output\` ]]; then touch ../../../simulated/finished_{params.name}.txt; fi" >> $TBG_TPLFILE
        # parameter dependent compile
        pic-build -c \"-DPARAM_OVERWRITES:LIST=\'$build_command\'\"
        # create simulation director
        tbg -t -c etc/picongpu/{params.cfg} {current_dir}/{output}
        """

# start and track simulation
rule simulate:
    input: rules.compile.output
    output: f"simulated/finished_{paramspace.wildcard_pattern}.txt"
    params:
        name=f"{paramspace.wildcard_pattern}"
    retries: 3  # can also be used to resubmit simulation, if '--checkpoint.tryRestart' is used
    shell:
         """
        # if no job id is known -> start simulation
        if ! [ -f simulated/job_id_{params.name}.txt ]; then
            bsub {input}/tbg/submit.start > simulated/job_id_{params.name}.txt
        fi

        job_id=$(cut -c 6-12 simulated/job_id_{params.name}.txt)
        status=$(bjobs -noheader -o stat:4 $job_id)

        # if job isn't running or pending -> restart job
        if ! [[ "$status" == "PEND" || "$status" == "RUN " ]]; then
            bsub {input}/tbg/submit.start >  simulated/job_id_{params.name}.txt
            job_id=$(cut -c 6-12 simulated/job_id_{params.name}.txt)
            status=$(bjobs -noheader -o stat:4 $job_id)
        fi
        # wait till job is finished
        while [[ "$status" == "PEND" || "$status" == "RUN " ]]
        do
            sleep 120
            status=$(bjobs -noheader -o stat:4 $job_id)
        done
        """
